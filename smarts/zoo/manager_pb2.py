# MIT License
#
# Copyright (C) 2021. Huawei Technologies Co., Ltd. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: manager.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor.FileDescriptor(
    name="manager.proto",
    package="manager",
    syntax="proto3",
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
    serialized_pb=b'\n\rmanager.proto\x12\x07manager"\t\n\x07Machine"\x13\n\x04Port\x12\x0b\n\x03num\x18\x01 \x01(\x05"\x08\n\x06Status2m\n\x07Manager\x12\x31\n\x0cspawn_worker\x12\x10.manager.Machine\x1a\r.manager.Port"\x00\x12/\n\x0bstop_worker\x12\r.manager.Port\x1a\x0f.manager.Status"\x00\x62\x06proto3',
)


_MACHINE = _descriptor.Descriptor(
    name="Machine",
    full_name="manager.Machine",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=26,
    serialized_end=35,
)


_PORT = _descriptor.Descriptor(
    name="Port",
    full_name="manager.Port",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[
        _descriptor.FieldDescriptor(
            name="num",
            full_name="manager.Port.num",
            index=0,
            number=1,
            type=5,
            cpp_type=1,
            label=1,
            has_default_value=False,
            default_value=0,
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=37,
    serialized_end=56,
)


_STATUS = _descriptor.Descriptor(
    name="Status",
    full_name="manager.Status",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=58,
    serialized_end=66,
)

DESCRIPTOR.message_types_by_name["Machine"] = _MACHINE
DESCRIPTOR.message_types_by_name["Port"] = _PORT
DESCRIPTOR.message_types_by_name["Status"] = _STATUS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Machine = _reflection.GeneratedProtocolMessageType(
    "Machine",
    (_message.Message,),
    {
        "DESCRIPTOR": _MACHINE,
        "__module__": "manager_pb2"
        # @@protoc_insertion_point(class_scope:manager.Machine)
    },
)
_sym_db.RegisterMessage(Machine)

Port = _reflection.GeneratedProtocolMessageType(
    "Port",
    (_message.Message,),
    {
        "DESCRIPTOR": _PORT,
        "__module__": "manager_pb2"
        # @@protoc_insertion_point(class_scope:manager.Port)
    },
)
_sym_db.RegisterMessage(Port)

Status = _reflection.GeneratedProtocolMessageType(
    "Status",
    (_message.Message,),
    {
        "DESCRIPTOR": _STATUS,
        "__module__": "manager_pb2"
        # @@protoc_insertion_point(class_scope:manager.Status)
    },
)
_sym_db.RegisterMessage(Status)


_MANAGER = _descriptor.ServiceDescriptor(
    name="Manager",
    full_name="manager.Manager",
    file=DESCRIPTOR,
    index=0,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
    serialized_start=68,
    serialized_end=177,
    methods=[
        _descriptor.MethodDescriptor(
            name="spawn_worker",
            full_name="manager.Manager.spawn_worker",
            index=0,
            containing_service=None,
            input_type=_MACHINE,
            output_type=_PORT,
            serialized_options=None,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.MethodDescriptor(
            name="stop_worker",
            full_name="manager.Manager.stop_worker",
            index=1,
            containing_service=None,
            input_type=_PORT,
            output_type=_STATUS,
            serialized_options=None,
            create_key=_descriptor._internal_create_key,
        ),
    ],
)
_sym_db.RegisterServiceDescriptor(_MANAGER)

DESCRIPTOR.services_by_name["Manager"] = _MANAGER

# @@protoc_insertion_point(module_scope)
